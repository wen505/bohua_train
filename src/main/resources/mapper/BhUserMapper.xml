<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.bh.train.dao.BhUserMapper" >
  <resultMap id="BaseResultMap" type="com.bh.train.model.BhUser" >
    <id column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="login_name" property="loginName" jdbcType="VARCHAR" />
    <result column="user_name" property="userName" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="sex" property="sex" jdbcType="VARCHAR" />
    <result column="telephone" property="telephone" jdbcType="VARCHAR" />
    <result column="indentity" property="indentity" jdbcType="VARCHAR" />
    <result column="educational_status" property="educationalStatus" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="address" property="address" jdbcType="VARCHAR" />
    <result column="user_type" property="userType" jdbcType="VARCHAR" />
    <result column="sn" property="sn" jdbcType="INTEGER" />
    <result column="add_time" property="addTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="enabled_flag" property="enabledFlag" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    user_id, login_name, user_name, password, sex, telephone, indentity, educational_status, 
    email, address, user_type, sn, add_time, update_time, enabled_flag
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from bh_user
    where user_id = #{userId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from bh_user
    where user_id = #{userId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.bh.train.model.BhUser" >
    insert into bh_user (user_id, login_name, user_name, 
      password, sex, telephone, 
      indentity, educational_status, email, 
      address, user_type, sn, 
      add_time, update_time, enabled_flag
      )
    values (#{userId,jdbcType=INTEGER}, #{loginName,jdbcType=VARCHAR}, #{userName,jdbcType=VARCHAR}, 
      #{password,jdbcType=VARCHAR}, #{sex,jdbcType=VARCHAR}, #{telephone,jdbcType=VARCHAR}, 
      #{indentity,jdbcType=VARCHAR}, #{educationalStatus,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{address,jdbcType=VARCHAR}, #{userType,jdbcType=VARCHAR}, #{sn,jdbcType=INTEGER}, 
      #{addTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{enabledFlag,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.bh.train.model.BhUser" >
    insert into bh_user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        user_id,
      </if>
      <if test="loginName != null" >
        login_name,
      </if>
      <if test="userName != null" >
        user_name,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="sex != null" >
        sex,
      </if>
      <if test="telephone != null" >
        telephone,
      </if>
      <if test="indentity != null" >
        indentity,
      </if>
      <if test="educationalStatus != null" >
        educational_status,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="address != null" >
        address,
      </if>
      <if test="userType != null" >
        user_type,
      </if>
      <if test="sn != null" >
        sn,
      </if>
      <if test="addTime != null" >
        add_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="enabledFlag != null" >
        enabled_flag,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="loginName != null" >
        #{loginName,jdbcType=VARCHAR},
      </if>
      <if test="userName != null" >
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        #{sex,jdbcType=VARCHAR},
      </if>
      <if test="telephone != null" >
        #{telephone,jdbcType=VARCHAR},
      </if>
      <if test="indentity != null" >
        #{indentity,jdbcType=VARCHAR},
      </if>
      <if test="educationalStatus != null" >
        #{educationalStatus,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="address != null" >
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="userType != null" >
        #{userType,jdbcType=VARCHAR},
      </if>
      <if test="sn != null" >
        #{sn,jdbcType=INTEGER},
      </if>
      <if test="addTime != null" >
        #{addTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="enabledFlag != null" >
        #{enabledFlag,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.bh.train.model.BhUser" >
    update bh_user
    <set >
      <if test="loginName != null" >
        login_name = #{loginName,jdbcType=VARCHAR},
      </if>
      <if test="userName != null" >
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        sex = #{sex,jdbcType=VARCHAR},
      </if>
      <if test="telephone != null" >
        telephone = #{telephone,jdbcType=VARCHAR},
      </if>
      <if test="indentity != null" >
        indentity = #{indentity,jdbcType=VARCHAR},
      </if>
      <if test="educationalStatus != null" >
        educational_status = #{educationalStatus,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="address != null" >
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="userType != null" >
        user_type = #{userType,jdbcType=VARCHAR},
      </if>
      <if test="sn != null" >
        sn = #{sn,jdbcType=INTEGER},
      </if>
      <if test="addTime != null" >
        add_time = #{addTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="enabledFlag != null" >
        enabled_flag = #{enabledFlag,jdbcType=VARCHAR},
      </if>
    </set>
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.bh.train.model.BhUser" >
    update bh_user
    set login_name = #{loginName,jdbcType=VARCHAR},
      user_name = #{userName,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=VARCHAR},
      telephone = #{telephone,jdbcType=VARCHAR},
      indentity = #{indentity,jdbcType=VARCHAR},
      educational_status = #{educationalStatus,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      user_type = #{userType,jdbcType=VARCHAR},
      sn = #{sn,jdbcType=INTEGER},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where user_id = #{userId,jdbcType=INTEGER}
  </update>

  <!--登录验证-->
  <select id="selectForLogin" resultMap="BaseResultMap" parameterType="com.bh.train.vo.LoginReqVo" >
    select
    <include refid="Base_Column_List" />
    from bh_user
    where login_name = #{userName,jdbcType=VARCHAR}
    AND  password = #{password,jdbcType=VARCHAR}
    and enabled_flag = 'Y'
  </select>
  <!-- 修改用户密码 -->
  <update id="updateUserPassword" parameterType="com.bh.train.vo.LoginReqVo">
    update bh_user
    set password = #{newPassword,jdbcType=VARCHAR}
    where user_id = #{userId,jdbcType=INTEGER}
  </update>

  <!-- 根据登录名修改用户密码 -->
  <update id="updateUserPasswordByLoginName" parameterType="com.bh.train.vo.LoginReqVo">
    update bh_user
    set password = #{newPassword,jdbcType=VARCHAR}
    where login_name = #{userName,jdbcType=VARCHAR}
  </update>

  <!-- 模糊查询用户信息 分页查询 -->
  <select id="selectPage" parameterType="com.bh.train.model.BhUser"
          resultMap="BaseResultMap">
    SELECT su.*
    FROM bh_user su
    WHERE su.enabled_flag = 'Y'
    <if test="loginName != null and loginName!='' ">
      AND su.login_name like
      CONCAT('%',#{loginName,jdbcType=VARCHAR},'%')
    </if>
    <if test="userName != null and userName!='' ">
      AND su.user_name like
      CONCAT('%',#{userName,jdbcType=VARCHAR},'%')
    </if>
    <if test="roleId!= null ">
      and su.user_id in (
      select sr1.user_id FROM bh_user_role sr1 WHERE role_id = #{roleId,jdbcType=INTEGER}
      )
    </if>
    order by user_id
    limit #{start},#{limit}
  </select>
  <!-- 根据模糊条件查询出总记录数 -->
  <select id="selectCount" parameterType="com.bh.train.model.BhUser"
          resultType="java.lang.Integer">
    SELECT count(1)
    FROM bh_user su
    WHERE su.enabled_flag = 'Y'
    <if test="loginName != null and loginName!='' ">
      AND su.login_name like
      CONCAT('%',#{loginName,jdbcType=VARCHAR},'%')
    </if>
    <if test="userName != null and userName!='' ">
      AND su.user_name like
      CONCAT('%',#{userName,jdbcType=VARCHAR},'%')
    </if>
    <if test="roleId!= null ">
      and su.user_id in (
      select sr1.user_id FROM bh_user_role sr1 WHERE role_id = #{roleId,jdbcType=INTEGER}
      )
    </if>
  </select>
  <!-- 批量修改用户信息的可用状态 -->
  <update id="updatbatchUserEnabledFlag" parameterType="java.util.List">
    UPDATE bh_user
    set enabled_flag = 'N'
    WHERE user_id IN
    <foreach close=")" collection="list" item="item" open="("
             separator=",">
      #{item.userId,jdbcType=INTEGER}
    </foreach>
  </update>

  <!-- 删除用户角色关联表 -->
  <delete id="deleteBathUserRole" parameterType="java.util.List">
    delete from bh_user_role where user_id in
    <foreach collection="list" item="item" open="(" close=")"
             separator=",">
      #{item.userId,jdbcType=INTEGER}
    </foreach>
  </delete>
  <!-- 根据登录名查询用户 -->
  <select id="selectUserByLoginName" parameterType="java.lang.String"
          resultMap="BaseResultMap">
    select * from bh_user
    where login_name = #{loginName,jdbcType=VARCHAR}
  </select>

  <!-- 根据用户id删除用户角色关联表 -->
  <delete id="deleteUserRoleByUserId" parameterType="java.lang.Integer">
    delete from bh_user_role
    where user_id = #{userId,jdbcType=INTEGER}
  </delete>
  <!-- 批量添加用户与角色关联的表中的数据 -->
  <insert id="insertBatchUserRole" parameterType="java.util.List">
    INSERT INTO bh_user_role (role_id,user_id)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.roleId,jdbcType=INTEGER},#{item.userId,jdbcType=INTEGER})
    </foreach>
  </insert>

  <!-- 查询不在制定角色下的用户-->
  <select id="findNotUserByRoleId" parameterType="com.bh.train.model.BhUser" resultMap="BaseResultMap" >
    SELECT * FROM
    bh_user su
    WHERE
    su.user_id NOT in (
    SELECT
    sur2.user_id
    FROM
    bh_user_role sur2
    WHERE
    sur2.role_id =#{roleId,jdbcType=INTEGER}
    )
    and su.enabled_flag = 'Y'
    <if test="loginName != null and loginName!='' ">
      and su.login_name like
      CONCAT('%',#{loginName,jdbcType=VARCHAR},'%')
    </if>
    <if test="userName != null and userName!='' ">
      AND su.user_name like
      CONCAT('%',#{userName,jdbcType=VARCHAR},'%')
    </if>
    order by su.user_id
    limit #{start},#{limit}
  </select>
  <!-- 查询不在制定角色下的用户记录数 -->
  <select id="findNotUserCountByRoleId" parameterType="com.bh.train.model.BhUser" resultType="java.lang.Integer">
    SELECT COUNT(1) FROM
    bh_user su
    WHERE
    su.user_id NOT in (
    SELECT
    sur2.user_id
    FROM
    bh_user_role sur2
    WHERE
    sur2.role_id =#{roleId,jdbcType=INTEGER}
    )
    and su.enabled_flag = 'Y'
    <if test="loginName != null and loginName!='' ">
      and su.login_name like
      CONCAT('%',#{loginName,jdbcType=VARCHAR},'%')
    </if>
    <if test="userName != null and userName!='' ">
      AND su.user_name like
      CONCAT('%',#{userName,jdbcType=VARCHAR},'%')
    </if>
  </select>
</mapper>